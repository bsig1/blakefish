//
// Created by mrsig on 7/11/2025.
//

#ifndef EVAL_H
#define EVAL_H
#include "gameboard.h"

// --Pawn hash table stuff--
#define PAWN_HASH_SIZE (1<<18)   // e.g. 256K entries
#define PAWN_HASH_MASK (PAWN_HASH_SIZE - 1)

// --Eval Constants--
#define ISO_PEN       15   // Isolated pawn
#define DOUBLED_PEN   10   // Each extra pawn on a file
#define BACKWARD_PEN  10   // A pawn that can’t be safely advanced
#define ISLAND_PEN    12   // Each extra pawn‐island beyond one
#define CHAIN_BONUS    6   // Each pawn defensive “link” in a chain

// piece‐values in centi-pawns
#define PAWN_VALUE     100
#define KNIGHT_VALUE   320
#define BISHOP_VALUE   330
#define ROOK_VALUE     500
#define QUEEN_VALUE    900
#define KING_VALUE  100000   // arbitrary large value

// bonus for having the two bishops
#define BISHOP_PAIR_BONUS 20

// bonus for whoevers turn it currently is
#define TURN_BONUS 5

#define SEMI_OPEN_FILE_BONUS 10
#define OPEN_FILE_BONUS 10

#define ENDGAME_MATERIAL_LINE 70

// Indexed by color, piece, then square
static const int PIECE_SQUARE_TABLE_MIDDLEGAME[2][6][64] = {
	{ // --WHITE--
    // Knight
		    {
		     -50, -40, -30, -30, -30, -30, -40, -50,
		     -40, -20,   0,   5,   5,   0, -20, -40,
		     -30,   5,  10,  15,  15,  10,   5, -30,
		     -30,   0,  15,  20,  20,  15,   0, -30,
		     -30,   5,  15,  20,  20,  15,   5, -30,
		     -30,   0,  10,  15,  15,  10,   0, -30,
		     -40, -20,   0,   0,   0,   0, -20, -40,
		     -50, -40, -30, -30, -30, -30, -40, -50
		    },
		    // Bishop
		    {
		     -20, -10, -10, -10, -10, -10, -10, -20,
		     -10,   0,   0,   0,   0,   0,   0, -10,
		     -10,   0,   5,  10,  10,   5,   0, -10,
		     -10,   5,   5,  10,  10,   5,   5, -10,
		     -10,   0,  10,  10,  10,  10,   0, -10,
		     -10,  10,  10,  10,  10,  10,  10, -10,
		     -10,   5,   0,   0,   0,   0,   5, -10,
		     -20, -10, -10, -10, -10, -10, -10, -20
		    },
			// Queen
		{
			-20, -10, -10,  -5,  -5, -10, -10, -20,
			-10,   0,   0,   0,   0,   0,   0, -10,
			-10,   0,   5,   5,   5,   5,   0, -10,
			 -5,   0,   5,   5,   5,   5,   0,  -5,
			   0,   0,   5,   5,   5,   5,   0,  -5,
			-10,   5,   5,   5,   5,   5,   0, -10,
			-10,   0,   5,   0,   0,   0,   0, -10,
			-20, -10, -10,  -5,  -5, -10, -10, -20
		   },
		    // Rook
		    {
		        0,   0,   0,   0,   0,   0,   0,   0,
		        5,  10,  10,  10,  10,  10,  10,   5,
		       -5,   0,   0,   0,   0,   0,   0,  -5,
		       -5,   0,   0,   0,   0,   0,   0,  -5,
		       -5,   0,   0,   0,   0,   0,   0,  -5,
		       -5,   0,   0,   0,   0,   0,   0,  -5,
		       -5,   0,   0,   0,   0,   0,   0,  -5,
		        0,   0,   0,   5,   5,   0,   0,   0
		    },
		    // King (middle‐game)
		    {
		     -30, -40, -40, -50, -50, -40, -40, -30,
		     -30, -40, -40, -50, -50, -40, -40, -30,
		     -30, -40, -40, -50, -50, -40, -40, -30,
		     -30, -40, -40, -50, -50, -40, -40, -30,
		     -20, -30, -30, -40, -40, -30, -30, -20,
		     -10, -20, -20, -20, -20, -20, -20, -10,
		      20,  20,   0,   0,   0,   0,  20,  20,
		      20,  30,  10,   0,   0,  10,  30,  20
		    },
			// Pawn
		{
			0,   0,   0,   0,   0,   0,   0,   0,
		   50,  50,  50,  50,  50,  50,  50,  50,
		   10,  10,  20,  30,  30,  20,  10,  10,
			5,   5,  10,  25,  25,  10,   5,   5,
			0,   0,   0,  20,  20,   0,   0,   0,
			5,  -5, -10,   0,   0, -10,  -5,   5,
			5,  10,  10, -20, -20,  10,  10,   5,
			0,   0,   0,   0,   0,   0,   0,   0
		 },
	},		//--BLACK--
	 {
	    // Knight
	    {
	      -50,  -40,  -30,  -30,  -30,  -30,  -40,  -50,
	      -40,  -20,    0,    0,    0,    0,  -20,  -40,
	      -30,    0,   10,   15,   15,   10,    0,  -30,
	      -30,    5,   15,   20,   20,   15,    5,  -30,
	      -30,    0,   15,   20,   20,   15,    0,  -30,
	      -30,    5,   10,   15,   15,   10,    5,  -30,
	      -40,  -20,    0,    5,    5,    0,  -20,  -40,
	      -50,  -40,  -30,  -30,  -30,  -30,  -40,  -50
	    },
	    // Bishop
	    {
	      -20,  -10,  -10,  -10,  -10,  -10,  -10,  -20,
	      -10,    5,    0,    0,    0,    0,    5,  -10,
	      -10,   10,   10,   10,   10,   10,   10,  -10,
	      -10,    0,   10,   10,   10,   10,    0,  -10,
	      -10,    5,    5,   10,   10,    5,    5,  -10,
	      -10,    0,    5,   10,   10,    5,    0,  -10,
	      -10,    0,    0,    0,    0,    0,    0,  -10,
	      -20,  -10,  -10,  -10,  -10,  -10,  -10,  -20
	    },
	    // Queen
	    {
	      -20,  -10,  -10,   -5,   -5,  -10,  -10,  -20,
	      -10,    0,    5,    0,    0,    0,    0,  -10,
	      -10,    5,    5,    5,    5,    5,    0,  -10,
	        0,    0,    5,    5,    5,    5,    0,   -5,
	       -5,    0,    5,    5,    5,    5,    0,   -5,
	      -10,    0,    5,    5,    5,    5,    0,  -10,
	      -10,    0,    0,    0,    0,    0,    0,  -10,
	      -20,  -10,  -10,   -5,   -5,  -10,  -10,  -20
	    },
	    // Rook
	    {
	        0,    0,    0,    5,    5,    0,    0,    0,
	       -5,    0,    0,    0,    0,    0,    0,   -5,
	       -5,    0,    0,    0,    0,    0,    0,   -5,
	       -5,    0,    0,    0,    0,    0,    0,   -5,
	       -5,    0,    0,    0,    0,    0,    0,   -5,
	       -5,    0,    0,    0,    0,    0,    0,   -5,
	        5,   10,   10,   10,   10,   10,   10,    5,
	        0,    0,    0,    0,    0,    0,    0,    0
	    },
	    // King (middle‐game)
	    {
	       20,   30,   10,    0,    0,   10,   30,   20,
	       20,   20,    0,    0,    0,    0,   20,   20,
	      -10,  -20,  -20,  -20,  -20,  -20,  -20,  -10,
	      -20,  -30,  -30,  -40,  -40,  -30,  -30,  -20,
	      -30,  -40,  -40,  -50,  -50,  -40,  -40,  -30,
	      -30,  -40,  -40,  -50,  -50,  -40,  -40,  -30,
	      -30,  -40,  -40,  -50,  -50,  -40,  -40,  -30,
	      -30,  -40,  -40,  -50,  -50,  -40,  -40,  -30
	    },
	    // Pawn
	    {
	        0,    0,    0,    0,    0,    0,    0,    0,
	        5,   10,   10,  -20,  -20,   10,   10,    5,
	        5,   -5,  -10,    0,    0,  -10,   -5,    5,
	        0,    0,    0,   20,   20,    0,    0,    0,
	        5,    5,   10,   25,   25,   10,    5,    5,
	       10,   10,   20,   30,   30,   20,   10,   10,
	       50,   50,   50,   50,   50,   50,   50,   50,
	        0,    0,    0,    0,    0,    0,    0,    0
	    }
	}
};

static const int PIECE_SQUARE_TABLE_ENDGAME[2][6][64] = {
    { // --WHITE--
        // 0: Knight
        {
         -50, -40, -30, -30, -30, -30, -40, -50,
         -40, -20,   0,   5,   5,   0, -20, -40,
         -30,   5,  10,  15,  15,  10,   5, -30,
         -30,   0,  15,  20,  20,  15,   0, -30,
         -30,   5,  15,  20,  20,  15,   5, -30,
         -30,   0,  10,  15,  15,  10,   0, -30,
         -40, -20,   0,   0,   0,   0, -20, -40,
         -50, -40, -30, -30, -30, -30, -40, -50
        },
        // 1: Bishop
        {
         -20, -10, -10, -10, -10, -10, -10, -20,
         -10,   0,   0,   0,   0,   0,   0, -10,
         -10,   0,   5,  10,  10,   5,   0, -10,
         -10,   5,   5,  10,  10,   5,   5, -10,
         -10,   0,  10,  10,  10,  10,   0, -10,
         -10,  10,  10,  10,  10,  10,  10, -10,
         -10,   5,   0,   0,   0,   0,   5, -10,
         -20, -10, -10, -10, -10, -10, -10, -20
        },
        // 2: Queen
        {
         -20, -10, -10,  -5,  -5, -10, -10, -20,
         -10,   0,   0,   0,   0,   0,   0, -10,
         -10,   0,   5,   5,   5,   5,   0, -10,
          -5,   0,   5,   5,   5,   5,   0,  -5,
           0,   0,   5,   5,   5,   5,   0,  -5,
         -10,   5,   5,   5,   5,   5,   0, -10,
         -10,   0,   5,   0,   0,   0,   0, -10,
         -20, -10, -10,  -5,  -5, -10, -10, -20
        },
        // 3: Rook
        {
           0,   0,   0,   0,   0,   0,   0,   0,
           5,  10,  10,  10,  10,  10,  10,   5,
          -5,   0,   0,   0,   0,   0,   0,  -5,
          -5,   0,   0,   0,   0,   0,   0,  -5,
          -5,   0,   0,   0,   0,   0,   0,  -5,
          -5,   0,   0,   0,   0,   0,   0,  -5,
          -5,   0,   0,   0,   0,   0,   0,  -5,
           0,   0,   0,   0,   0,   0,   0,   0
        },
        // 4: King (endgame)
        {
         -50, -30, -30, -30, -30, -30, -30, -50,
         -30, -10,   0,   0,   0,   0, -10, -30,
         -30,   0,  10,  15,  15,  10,   0, -30,
         -30,   0,  15,  20,  20,  15,   0, -30,
         -30,   0,  15,  20,  20,  15,   0, -30,
         -30,   0,  10,  15,  15,  10,   0, -30,
         -30, -10,   0,   0,   0,   0, -10, -30,
         -50, -30, -30, -30, -30, -30, -30, -50
        },
        // 5: Pawn (endgame: reward advancement)
        {
           0,   0,   0,   0,   0,   0,   0,   0,
           5,   5,   5,   5,   5,   5,   5,   5,
          10,  10,  10,  10,  10,  10,  10,  10,
          20,  20,  20,  20,  20,  20,  20,  20,
          30,  30,  30,  30,  30,  30,  30,  30,
          40,  40,  40,  40,  40,  40,  40,  40,
          50,  50,  50,  50,  50,  50,  50,  50,
           0,   0,   0,   0,   0,   0,   0,   0
        }
    },
    { // --BLACK--  (just the mirror of the white tables)
        // Knight
        {
         -50, -40, -30, -30, -30, -30, -40, -50,
         -40, -20,   0,   0,   0,   0, -20, -40,
         -30,   0,  10,  15,  15,  10,   0, -30,
         -30,   5,  15,  20,  20,  15,   5, -30,
         -30,   0,  15,  20,  20,  15,   0, -30,
         -30,   5,  10,  15,  15,  10,   5, -30,
         -40, -20,   0,   5,   5,   0, -20, -40,
         -50, -40, -30, -30, -30, -30, -40, -50
        },
        // Bishop
        {
         -20, -10, -10, -10, -10, -10, -10, -20,
         -10,   5,   0,   0,   0,   0,   5, -10,
         -10,  10,  10,  10,  10,  10,  10, -10,
         -10,   0,  10,  10,  10,  10,   0, -10,
         -10,   5,   5,  10,  10,   5,   5, -10,
         -10,   0,   5,  10,  10,   5,   0, -10,
         -10,   0,   0,   0,   0,   0,   0, -10,
         -20, -10, -10, -10, -10, -10, -10, -20
        },
        // Queen
        {
         -20, -10, -10,  -5,  -5, -10, -10, -20,
         -10,   0,   5,   0,   0,   0,   0, -10,
         -10,   5,   5,   5,   5,   5,   0, -10,
           0,   0,   5,   5,   5,   5,   0,  -5,
          -5,   0,   5,   5,   5,   5,   0,  -5,
         -10,   5,   5,   5,   5,   5,   0, -10,
         -10,   0,   5,   0,   0,   0,   0, -10,
         -20, -10, -10,  -5,  -5, -10, -10, -20
        },
        // Rook
        {
           0,   0,   0,   0,   0,   0,   0,   0,
          -5,   0,   0,   0,   0,   0,   0,  -5,
          -5,   0,   0,   0,   0,   0,   0,  -5,
          -5,   0,   0,   0,   0,   0,   0,  -5,
          -5,   0,   0,   0,   0,   0,   0,  -5,
          -5,   0,   0,   0,   0,   0,   0,  -5,
           5,  10,  10,  10,  10,  10,  10,   5,
           0,   0,   0,   0,   0,   0,   0,   0
        },
        // King (endgame)
        {
         -50, -30, -30, -30, -30, -30, -30, -50,
         -30, -10,   0,   0,   0,   0, -10, -30,
         -30,   0,  10,  15,  15,  10,   0, -30,
         -30,   0,  15,  20,  20,  15,   0, -30,
         -30,   0,  15,  20,  20,  15,   0, -30,
         -30,   0,  10,  15,  15,  10,   0, -30,
         -30, -10,   0,   0,   0,   0, -10, -30,
         -50, -30, -30, -30, -30, -30, -30, -50
        },
        // Pawn (endgame)
        {
           0,   0,   0,   0,   0,   0,   0,   0,
          50,  50,  50,  50,  50,  50,  50,  50,
          40,  40,  40,  40,  40,  40,  40,  40,
          30,  30,  30,  30,  30,  30,  30,  30,
          20,  20,  20,  20,  20,  20,  20,  20,
          10,  10,  10,  10,  10,  10,  10,  10,
           5,   5,   5,   5,   5,   5,   5,   5,
           0,   0,   0,   0,   0,   0,   0,   0
        }
    }
};

static const int KNIGHT_OUTPOST_BONUS[2][64] = {
	{ // WHITE
		0,   0,   0,   0,   0,   0,   0,   0,
		0,   0,   0,   0,   0,   0,   0,   0,
		0,   5,  10,  10,  10,  10,   5,   0,
		0,  10,  20,  30,  30,  20,  10,   0,
		0,  10,  20,  30,  30,  20,  10,   0,
		0,   5,  10,  10,  10,  10,   5,   0,
		0,   0,   0,   0,   0,   0,   0,   0,
		0,   0,   0,   0,   0,   0,   0,   0
	},{
		// BLACK  (mirror of WHITE)
		0,   0,   0,   0,   0,   0,   0,   0,
		0,   0,   0,   0,   0,   0,   0,   0,
		0,   0,   0,   0,   0,   0,   0,   0,
		0,   5,  10,  10,  10,  10,   5,   0,
		0,  10,  20,  30,  30,  20,  10,   0,
		0,  10,  20,  30,  30,  20,  10,   0,
		0,   5,  10,  10,  10,  10,   5,   0,
		0,   0,   0,   0,   0,   0,   0,   0
	}
};

static const U64 KNIGHT_OUTPOST_IMMUNE_WHITE[64] = {
    0x0202020202020200ULL, 0x0505050505050500ULL, 0x0a0a0a0a0a0a0a00ULL, 0x1414141414141400ULL,
    0x2828282828282800ULL, 0x5050505050505000ULL, 0xa0a0a0a0a0a0a000ULL, 0x4040404040404000ULL,
    0x0202020202020000ULL, 0x0505050505050000ULL, 0x0a0a0a0a0a0a0000ULL, 0x1414141414140000ULL,
    0x2828282828280000ULL, 0x5050505050500000ULL, 0xa0a0a0a0a0a00000ULL, 0x4040404040400000ULL,
    0x0202020202000000ULL, 0x0505050505000000ULL, 0x0a0a0a0a0a000000ULL, 0x1414141414000000ULL,
    0x2828282828000000ULL, 0x5050505050000000ULL, 0xa0a0a0a0a0000000ULL, 0x4040404040000000ULL,
    0x0202020200000000ULL, 0x0505050500000000ULL, 0x0a0a0a0a00000000ULL, 0x1414141400000000ULL,
    0x2828282800000000ULL, 0x5050505000000000ULL, 0xa0a0a0a000000000ULL, 0x4040404000000000ULL,
    0x0202020000000000ULL, 0x0505050000000000ULL, 0x0a0a0a0000000000ULL, 0x1414140000000000ULL,
    0x2828280000000000ULL, 0x5050500000000000ULL, 0xa0a0a00000000000ULL, 0x4040400000000000ULL,
    0x0202000000000000ULL, 0x0505000000000000ULL, 0x0a0a000000000000ULL, 0x1414000000000000ULL,
    0x2828000000000000ULL, 0x5050000000000000ULL, 0xa0a0000000000000ULL, 0x4040000000000000ULL,
    0x0200000000000000ULL, 0x0500000000000000ULL, 0x0a00000000000000ULL, 0x1400000000000000ULL,
    0x2800000000000000ULL, 0x5000000000000000ULL, 0xa000000000000000ULL, 0x4000000000000000ULL,
    0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
    0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL
};

static const U64 KNIGHT_OUTPOST_IMMUNE_BLACK[64] = {
    0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
    0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
    0x0000000000000002ULL, 0x0000000000000005ULL, 0x000000000000000aULL, 0x0000000000000014ULL,
    0x0000000000000028ULL, 0x0000000000000050ULL, 0x00000000000000a0ULL, 0x0000000000000040ULL,
    0x0000000000000202ULL, 0x0000000000000505ULL, 0x0000000000000a0aULL, 0x0000000000001414ULL,
    0x0000000000002828ULL, 0x0000000000005050ULL, 0x000000000000a0a0ULL, 0x0000000000004040ULL,
    0x0000000000020202ULL, 0x0000000000050505ULL, 0x00000000000a0a0aULL, 0x0000000000141414ULL,
    0x0000000000282828ULL, 0x0000000000505050ULL, 0x0000000000a0a0a0ULL, 0x0000000000404040ULL,
    0x0000000002020202ULL, 0x0000000005050505ULL, 0x000000000a0a0a0aULL, 0x0000000014141414ULL,
    0x0000000028282828ULL, 0x0000000050505050ULL, 0x00000000a0a0a0a0ULL, 0x0000000040404040ULL,
    0x0000000202020202ULL, 0x0000000505050505ULL, 0x0000000a0a0a0a0aULL, 0x0000001414141414ULL,
    0x0000002828282828ULL, 0x0000005050505050ULL, 0x000000a0a0a0a0a0ULL, 0x0000004040404040ULL,
    0x0000020202020202ULL, 0x0000050505050505ULL, 0x00000a0a0a0a0a0aULL, 0x0000141414141414ULL,
    0x0000282828282828ULL, 0x0000505050505050ULL, 0x0000a0a0a0a0a0a0ULL, 0x0000404040404040ULL,
    0x0002020202020202ULL, 0x0005050505050505ULL, 0x000a0a0a0a0a0a0aULL, 0x0014141414141414ULL,
    0x0028282828282828ULL, 0x0050505050505050ULL, 0x00a0a0a0a0a0a0a0ULL, 0x0040404040404040ULL
};
static const U64 KNIGHT_OUTPOST_GUARD_WHITE[64] = {
    0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
    0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
    0x0000000000000002ULL, 0x0000000000000005ULL, 0x000000000000000aULL, 0x0000000000000014ULL,
    0x0000000000000028ULL, 0x0000000000000050ULL, 0x00000000000000a0ULL, 0x0000000000000040ULL,
    0x0000000000000200ULL, 0x0000000000000500ULL, 0x0000000000000a00ULL, 0x0000000000001400ULL,
    0x0000000000002800ULL, 0x0000000000005000ULL, 0x000000000000a000ULL, 0x0000000000004000ULL,
    0x0000000000020000ULL, 0x0000000000050000ULL, 0x00000000000a0000ULL, 0x0000000000140000ULL,
    0x0000000000280000ULL, 0x0000000000500000ULL, 0x0000000000a00000ULL, 0x0000000000400000ULL,
    0x0000000002000000ULL, 0x0000000005000000ULL, 0x000000000a000000ULL, 0x0000000014000000ULL,
    0x0000000028000000ULL, 0x0000000050000000ULL, 0x00000000a0000000ULL, 0x0000000040000000ULL,
    0x0000000200000000ULL, 0x0000000500000000ULL, 0x0000000a00000000ULL, 0x0000001400000000ULL,
    0x0000002800000000ULL, 0x0000005000000000ULL, 0x000000a000000000ULL, 0x0000004000000000ULL,
    0x0000020000000000ULL, 0x0000050000000000ULL, 0x00000a0000000000ULL, 0x0000140000000000ULL,
    0x0000280000000000ULL, 0x0000500000000000ULL, 0x0000a00000000000ULL, 0x0000400000000000ULL,
    0x0002000000000000ULL, 0x0005000000000000ULL, 0x000a000000000000ULL, 0x0014000000000000ULL,
    0x0028000000000000ULL, 0x0050000000000000ULL, 0x00a0000000000000ULL, 0x0040000000000000ULL
};

static const U64 KNIGHT_OUTPOST_GUARD_BLACK[64] = {
    0x0000000000000200ULL, 0x0000000000000500ULL, 0x0000000000000a00ULL, 0x0000000000001400ULL,
    0x0000000000002800ULL, 0x0000000000005000ULL, 0x000000000000a000ULL, 0x0000000000004000ULL,
    0x0000000000020000ULL, 0x0000000000050000ULL, 0x00000000000a0000ULL, 0x0000000000140000ULL,
    0x0000000000280000ULL, 0x0000000000500000ULL, 0x0000000000a00000ULL, 0x0000000000400000ULL,
    0x0000000002000000ULL, 0x0000000005000000ULL, 0x000000000a000000ULL, 0x0000000014000000ULL,
    0x0000000028000000ULL, 0x0000000050000000ULL, 0x00000000a0000000ULL, 0x0000000040000000ULL,
    0x0000000200000000ULL, 0x0000000500000000ULL, 0x0000000a00000000ULL, 0x0000001400000000ULL,
    0x0000002800000000ULL, 0x0000005000000000ULL, 0x000000a000000000ULL, 0x0000004000000000ULL,
    0x0000020000000000ULL, 0x0000050000000000ULL, 0x00000a0000000000ULL, 0x0000140000000000ULL,
    0x0000280000000000ULL, 0x0000500000000000ULL, 0x0000a00000000000ULL, 0x0000400000000000ULL,
    0x0002000000000000ULL, 0x0005000000000000ULL, 0x000a000000000000ULL, 0x0014000000000000ULL,
    0x0028000000000000ULL, 0x0050000000000000ULL, 0x00a0000000000000ULL, 0x0040000000000000ULL,
    0x0200000000000000ULL, 0x0500000000000000ULL, 0x0a00000000000000ULL, 0x1400000000000000ULL,
    0x2800000000000000ULL, 0x5000000000000000ULL, 0xa000000000000000ULL, 0x4000000000000000ULL,
    0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
    0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL
};



static const int passedBonusWhite[8] = {
	0,    // rank1 (sq/8=0) — not in play
	20,   // rank2
	40,   // rank3
	60,   // rank4
	80,   // rank5
	100,  // rank6
	120,  // rank7
	0     // rank8 (already promoted)
};

// black is mirrored
static const int passedBonusBlack[8] = {
	0,    // rank1 (promoted)
	120,  // rank2 (from black’s perspective, sq/8=1)
	100,  // rank3
	80,   // rank4
	60,   // rank5
	40,   // rank6
	20,   // rank7
	0     // rank8
};

typedef struct {
	U64   key;    // pawn‐only Zobrist key
	int16_t eval; // cached pawn‐structure score
} PawnEntry;

// the table
static PawnEntry pawnTable[PAWN_HASH_SIZE];

// Zobrist keys: one random 64‐bit per side per square
static U64 pawnKeys[2][64];
// current pawn‐only key
static U64 pawnHashKey;
int get_eval(const Game *game);
static U64 passedMaskWhite[64], passedMaskBlack[64];

#endif //EVAL_H
